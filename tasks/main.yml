#
# # - name: Copy VDF repository
# #   template: >
# #    src=roles/ambari-cluster/templates/define_cluster.json.j2
# #    dest=/tmp/define_cluster.json
# #   # with_subelements:
# #   #   - "{{ services }}"
# #   #   - conf
# # #
- name: Create empty cluster
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"Clusters": {"cluster_name": "{{ cluster_name }}", "version":"HDP-2.6"}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: create_cluster
  no_log: False
  ignore_errors: True

# - fail:
#     msg: "Attempted to create a Cluster which already exists"
#   when: create_cluster.status == 409

- name: Cluster already exists
  pause: prompt='Please confirm you want to continue cluster {{ cluster_name }} already installed ! Press return to continue. Press Ctrl+c and then "a" to abort'
  when: create_cluster.status == 409

# - fail:
#     msg: "Something went wrong with cluster creation"
#   when: create_cluster.status not in [200,201,202]

- name: Error on cluster creation
  pause: prompt='Something went wrong with creation of cluster {{ cluster_name }}. Do you want to continue? Press return to continue. Press Ctrl+c and then "a" to abort'
  when: create_cluster.status not in [200,201,202,409]

- name: Copy VDF repository
  template: >
   src=roles/ambari-cluster/templates/repo.xml.j2
   dest=/tmp/repo.xml

- name: Load VDF repository
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/version_definitions"
    method: POST
    force_basic_auth: yes
    user: "admin"
    password: "admin"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"VersionDefinition": {"version_url": "file:/tmp/repo.xml"}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: register_vdf
  no_log: True
  ignore_errors: True

- name: VDF already exists
  pause: prompt='Please confirm you want to continue, VDF repository already installed ! Press return to continue. Press Ctrl+c and then "a" to abort'
  when: register_vdf.status == 500

- name: Define cluster services
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    # body: "{{ lookup('template','templates/define_cluster.json.j2') }}"
    body: '{"ServiceInfo":{"service_name":"{{ item.name|upper }}","desired_repository_version_id": 1}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: cluster_definition
  no_log: False
  with_items:
    - "{{ services }}"
  failed_when: cluster_definition.status not in [409, 200, 201, 202]

# - name: Cluster services already exists
#   pause: prompt='Please confirm you want to continue, services already exists on cluster {{ cluster_name }} ! Press return to continue. Press Ctrl+c and then "a" to abort'
#   when: cluster_definition.status == 409

- name: Load default configuration
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: "{{ lookup('template','templates/{{ item }}.json.j2') }}"
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  with_items:
   - "{{ base_cluster.conf }}"

- name: Activate cluster
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"Clusters":{"provisioning_state":"INSTALLED"}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes

- name: Load configuration for differents services
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: "{{ lookup('template','templates/{{ item.1 }}.json.j2') }}"
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  with_subelements:
    - "{{ services }}"
    - conf

- name: Load configuration for differents services
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: "{{ lookup('template','templates/{{ item.1 }}.json.j2') }}"
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  with_subelements:
    - "{{ services }}"
    - conf

- include: register_ranger_plugins.yml in_services={{ item }}
  with_items: "{{ cluster_services.RANGER.PLUGIN }}"
  when: cluster_services.RANGER.PLUGIN[in_services]

- name: Register HA components
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/service_name={{ item.0.name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"components":[{"ServiceComponentInfo":{"component_name":"{{ item.1 }}"}}]}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: register_components_ha
  with_subelements:
    - "{{ services }}"
    - components.ha
  when: cluster_services[item.0.name].HA is defined and cluster_services[item.0.name].HA == True and item.1 != ""
  failed_when: register_components_ha.status not in [409, 200, 201, 202]
  # ignore_errors: True

- name: Register components
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/service_name={{ item.0.name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"components":[{"ServiceComponentInfo":{"component_name":"{{ item.1 }}"}}]}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: register_components_noha
  with_subelements:
    - "{{ services }}"
    - components.noha
  when: cluster_services[item.0.name] is defined and cluster_services[item.0.name].HA is not defined and item.1 != ""
  failed_when: register_components_noha.status not in [409, 200, 201, 202]
  # ignore_errors: True

- name: Register clients components
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/service_name={{ item.0.name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"components":[{"ServiceComponentInfo":{"component_name":"{{ item.1 }}"}}]}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: register_components_clients
  with_subelements:
    - "{{ services }}"
    - components.client
  when: cluster_services[item.0.name] is defined and item.1 != ""
  failed_when: register_components_clients.status not in [409, 200, 201, 202]
  ignore_errors: True

- name: Register hosts
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/hosts"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '[{"Hosts":{"host_name":"{{ item }}"}}]'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: register_hosts
  with_items:
    - "{{ cluster_hosts }}"
  failed_when: register_hosts.status not in [409, 200, 201, 202]
  # ignore_errors: True

- include: register_components.yml hosts={{ item }}
  with_items: "{{ cluster_hosts }}"

- name: Trigger installation
  pause: prompt='Please confirm you want to trigger the installation for the cluster {{ cluster_name }}! Press return to continue. Press Ctrl+c and then "a" to abort'

- name: Trigger installation
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/state=INIT"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"RequestInfo": {"context" :"Installing Services API"}, "Body": {"ServiceInfo": {"state": "INSTALLED"}}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: check_install_all_services

- debug:
    var: check_install_all_services

- name: Wait for all services to be installed
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/requests/{{ check_install_all_services.json.Requests.id }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    status_code: 200,201,202
    validate_certs: no
    return_content: yes
  register: cluster_check_task_install_services
  until: (cluster_check_task_install_services.json.Requests.request_status == 'COMPLETED' and (cluster_check_task_install_services.json.Requests.completed_task_count|int > 0) or
          cluster_check_task_install_services.json.Requests.request_status == 'FAILED' or
          cluster_check_task_install_services.json.Requests.request_status == 'TIMEDOUT' or
          cluster_check_task_install_services.json.Requests.request_status == 'ABORTED')
  retries: "{{ wait_timeout // 10 }}"
  delay: 10
  when: wait and check_install_all_services is defined and check_install_all_services.json is defined and check_install_all_services and (check_install_all_services.json) != ""

- name: Start all services
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/services?ServiceInfo/state=INSTALLED"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body: '{"RequestInfo": {"context" :"Starting Services API"}, "Body": {"ServiceInfo": {"state": "STARTED"}}}'
    body_format: json
    validate_certs: no
    status_code: 200,201,202
  return_content: yes
  register: check_start_all_services

- name: Wait for all services to be started
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/requests/{{ check_start_all_services.json.Requests.id }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_username }}"
    password: "{{ ambari_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    body_format: json
    status_code: 200,201,202
    validate_certs: no
  return_content: yes
  register: cluster_check_task_start_services
  until: (cluster_check_task_start_services.json.Requests.request_status == 'COMPLETED' and (cluster_check_task_start_services.json.Requests.completed_task_count|int > 0) or
          cluster_check_task_start_services.json.Requests.request_status == 'FAILED' or
          cluster_check_task_start_services.json.Requests.request_status == 'TIMEDOUT' or
          cluster_check_task_start_services.json.Requests.request_status == 'ABORTED')
  retries: "{{ wait_timeout // 10 }}"
  delay: 10
  when: wait and check_start_all_services is defined and check_start_all_services and (check_start_all_services.json) != ""
#
# - debug:
#     var: cluster_check_task_start_services
