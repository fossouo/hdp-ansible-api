---
- command: "kadmin -p {{ kerberos_principal }} -w {{ kerberos_principal_password }} -q 'list_principals'"
  register: kadmin_check
  retries: 60

- name: Check if Kerberos already installed
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services/KERBEROS"
    method: GET
    force_basic_auth: yes
    user: "admin"
    password: "admin"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    validate_certs: no
    return_content: yes
    status_code: 200,201,202,404
    timeout: 60
  register: check_kerberos_services

- name: Add KERBEROS service to the cluster
  uri:
   url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services/KERBEROS"
   method: POST
   force_basic_auth: yes
   user: "admin"
   password: "admin"
   headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
   validate_certs: no
   return_content: yes
   status_code: 200,201,202,404,409
  register: add_kerberos_services
  when: check_kerberos_services.status != 200

- name: Check if KERBEROS_CLIENT already installed
  uri:
    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services/KERBEROS/components/KERBEROS_CLIENT"
    method: GET
    force_basic_auth: yes
    user: "admin"
    password: "admin"
    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
    validate_certs: no
    status_code: 200,201,202,404
    return_content: yes
  register: check_kerberos_client

- name: Add KERBEROS_CLIENT component to the cluster
  uri:
   url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/services/KERBEROS/components/KERBEROS_CLIENT"
   method: POST
   force_basic_auth: yes
   user: "admin"
   password: "admin"
   headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
   validate_certs: no
   status_code: 200,201,202,404
   return_content: yes
  register: add_kerberos_client
  when: check_kerberos_client.status != 200

- name: Fail if the KERBEROS_CLIENT component can't be installed
  fail:
    msg: "Failed to install KERBEROS service on {{ ambari_namespace }} cluster."
  when: add_kerberos_client.status is defined and add_kerberos_client.status == 404

- name: Add KERBEROS_CLIENT configuration
  uri:
   url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}"
   method: PUT
   force_basic_auth: yes
   user: "admin"
   password: "admin"
   headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
   body: "{{ lookup('template','templates/kerberos/krb5-conf.json.j2') }}"
   body_format: json
   validate_certs: no
   # status_code: 200,201,202,404
   return_content: yes
  register: add_kerberos_client_conf
  until: add_kerberos_client_conf.status == 200 or add_kerberos_client_conf.status == 201 or add_kerberos_client_conf.status == 202
  retries: "{{ wait_timeout // 10 }}"
  delay: 60
  when: wait
  failed_when: (add_kerberos_client_conf.status == '500')

- name: Deploy KERBEROS_CLIENT service for each hosts
  uri:
   url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/hosts"
   method: POST
   force_basic_auth: yes
   user: "admin"
   password: "admin"
   headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
   body: "{{ lookup('template','templates/kerberos/deploy_krb_client.json.j2') }}"
   body_format: json
   validate_certs: no
   return_content: yes
   status_code: 200,201,202,404
  register: deploy_kerberos_client
  failed_when: deploy_kerberos_client.status == 404

- name: Install KERBEROS services
  uri:
   url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}/host_components?HostRoles/state=INIT"
   method: PUT
   force_basic_auth: yes
   user: "admin"
   password: "admin"
   headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
   body: '{ "context": "Install Keberos Services","HostRoles": { "state":"INSTALLED" } }'
   body_format: json
   validate_certs: no
   status_code: 200,201,202,404
   return_content: yes
  register: install_kerberos

- name: Sleep
  shell: sleep 10

- name: Add KERBEROS_CLIENT configuration
  uri:
   url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}"
   method: PUT
   force_basic_auth: yes
   user: "admin"
   password: "admin"
   headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
   body: "{{ lookup('template','templates/kerberos/krb_enable.json.j2') }}"
   body_format: json
   validate_certs: no
   return_content: yes
  register: add_kerberos_client_configuration
  failed_when: add_kerberos_client_configuration.status == '500' or add_kerberos_client_configuration.status == '404'

- name: Wait for KERBEROS to be fully installed on the cluster
  uri:
   url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/requests/{{ add_kerberos_client_configuration.json.Requests.id }}"
   method: GET
   force_basic_auth: yes
   user: "admin"
   password: "admin"
   headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
   status_code: 200,201,202
   validate_certs: no
   return_content: yes
  register: cluster_check_kerberos_install
  until: (((cluster_check_kerberos_install.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_kerberos_install.content|from_json).Requests.completed_task_count|int > 0) or
       (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'FAILED' or
       (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'TIMEDOUT' or
       (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'ABORTED')
  retries: "{{ wait_timeout // 10 }}"
  delay: 30
  when: wait and add_kerberos_client_configuration is defined and (add_kerberos_client_configuration.content) != ""

# - name: Regenerate keytabs
#   uri:
#    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ ambari_namespace }}?regenerate_keytabs=all"
#    method: PUT
#    force_basic_auth: yes
#    user: "admin"
#    password: "admin"
#    headers: '{"X-Requested-By":"ambari", "Content-Type": "application/x-www-form-urlencoded"}'
#    body: '{"Clusters":{"security_type":"KERBEROS"}}'
#    body_format: json
#    validate_certs: no
#    return_content: yes
#   register: regenerate_keytabs
#   failed_when: regenerate_keytabs.status == '500' or regenerate_keytabs.status == '404'
#
# - name: Wait for regenerating keytabs
#   uri:
#    url: "{{ ambari_server_protocol }}://{{ ambari_server_hostname }}:{{ ambari_server_port }}/api/v1/clusters/{{ cluster_name }}/requests/{{ regenerate_keytabs.json.Requests.id }}"
#    method: GET
#    force_basic_auth: yes
#    user: "admin"
#    password: "admin"
#    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
#    status_code: 200,201,202
#    validate_certs: no
#    return_content: yes
#   register: cluster_check_kerberos_install
#   until: (((cluster_check_kerberos_install.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_kerberos_install.content|from_json).Requests.completed_task_count|int > 0) or
#        (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'FAILED' or
#        (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'TIMEDOUT' or
#        (cluster_check_kerberos_install.content|from_json).Requests.request_status == 'ABORTED')
#   retries: "{{ wait_timeout // 10 }}"
#   delay: 30
#   when: wait and regenerate_keytabs is defined and (regenerate_keytabs.content) != ""
